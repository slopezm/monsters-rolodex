{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","response","this","json","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAGaA,G,kBAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCHTC,EAAW,SAACR,GAAD,OACtB,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCAZO,G,MAAY,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,YAAaC,EAAgD,EAAhDA,aACvC,OAAO,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCsCtEG,E,kDAjCb,WAAYhB,GAAa,IAAD,8BACtB,cAAMA,IAQRa,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALO,E,gMAcCI,MAAM,8C,cAAvBC,E,YACNC,K,SAAgCD,EAASE,O,yBAAzBjB,S,WAAXS,S,qJAGgB,IAAD,EACcO,KAAKH,MAA/Bb,EADY,EACZA,SAAUU,EADE,EACFA,YACZQ,EAAmBlB,EAASmB,QAAO,SAACzB,GAAD,OACvCA,EAAQG,KAAKuB,cAAcC,SAASX,EAAYU,kBAElD,OACE,sBAAK5B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcY,KAAKZ,eAC5D,cAAC,EAAD,CAAUJ,SAAUkB,W,GA5BVI,IAAMC,WCETC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e22ee95d.chunk.js","sourcesContent":["import { Monster } from \"../../interfaces/monster.interface\";\nimport \"./card.styles.css\";\n\nexport const Card = (props: { monster: Monster }) => (\n  <div className=\"card-container\">\n    <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n);\n","import \"./card-list.styles.css\";\nimport { Card } from \"../card/card.component\";\nimport { Monster } from \"../../interfaces/monster.interface\";\n\nexport const CardList = (props: { monsters: Monster[] }) => (\n  <div className=\"card-list\">\n    {props.monsters.map((monster: Monster) => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n);\n","import \"./search-box.styles.css\";\n\ninterface SearchBoxProps {\n  placeholder?: string;\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const SearchBox = ({ placeholder, handleChange }: SearchBoxProps): JSX.Element => {\n  return <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { Monster } from \"./interfaces/monster.interface\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\ninterface AppProps {}\n\ninterface AppState {\n  monsters: Monster[];\n  searchField: string;\n}\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  async componentDidMount() {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    this.setState({ monsters: await response.json() });\n  }\n\n  render(): JSX.Element {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"Search monsters\" handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}